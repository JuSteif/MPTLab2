
MPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000039a  0000040e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000358  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000179  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047f  00000000  00000000  00000a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021e  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000033e  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  7a:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <A_2_3_2>:

//##############################################################################

// A_2_3_2: Kommunikation uC=>PC mit UsartPuts
void A_2_3_2(void)
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	// Initialisierung
	// IHR_CODE_HIER ...
	LED_DDR = 0xff;
  8e:	84 e3       	ldi	r24, 0x34	; 52
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
	LED_PORT = 0xff;
  98:	85 e3       	ldi	r24, 0x35	; 53
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18
	
	UsartInit(8, 0, 1, 9600);
  a2:	00 e8       	ldi	r16, 0x80	; 128
  a4:	15 e2       	ldi	r17, 0x25	; 37
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	88 e0       	ldi	r24, 0x08	; 8
  b0:	0e 94 6f 00 	call	0xde	; 0xde <UsartInit>
	
	SET_BIT(LED_PORT, 0);
  b4:	85 e3       	ldi	r24, 0x35	; 53
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	25 e3       	ldi	r18, 0x35	; 53
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	21 60       	ori	r18, 0x01	; 1
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	while (1)
	{
		// Jetzt geben wir etwas sinnvolles aus!
		// IHR_CODE_HIER ...
		
		UsartPuts("MPT macht Spass!\n\r");
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 83 01 	call	0x306	; 0x306 <UsartPuts>
	}		
  ce:	fb cf       	rjmp	.-10     	; 0xc6 <A_2_3_2+0x44>

000000d0 <main>:

#include "Labor_2/MPT_LAB_2.h"


int main(void)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  // Aufgabe A_2_3: Ausgabe auf Serieller Schnittstelle mit Dienstfunktionen realisieren
  // A_2_3_1: Kommunikation uC=>PC mit UsartInit und UsartPutc
  // A_2_3_2: Kommunikation uC=>PC mit UsartPuts, sonst wie A_2_3_1
  //------------------------------------------------------------------------------
  //A_2_3_1();
  A_2_3_2();
  d8:	0e 94 41 00 	call	0x82	; 0x82 <A_2_3_2>
  //A_2_5_2_Server();

  while(1)
  {
      //TODO:: Please write your application code 
  }
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0xc>

000000de <UsartInit>:
}
//#endif


void UsartInit(uint8_t CharBits, uint8_t ParBit, uint8_t StopBits, uint32_t Baudrate)
{
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	27 97       	sbiw	r28, 0x07	; 7
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	6a 83       	std	Y+2, r22	; 0x02
  fa:	4b 83       	std	Y+3, r20	; 0x03
  fc:	0c 83       	std	Y+4, r16	; 0x04
  fe:	1d 83       	std	Y+5, r17	; 0x05
 100:	2e 83       	std	Y+6, r18	; 0x06
 102:	3f 83       	std	Y+7, r19	; 0x07
	// Vorhandensein und Art des Paritäts-Bits festlegen:
	// Gerade   Parität: Anzahl der '1' wird auf gerade Anzahl ergänzt
	// Ungerade Parität: Anzahl der '1' wird auf ungerade Anzahl ergänzt
	// Keine    Parität: Paritäts-Bit entfällt
	if (ParBit == USART_EVEN_PARITY)
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	51 f4       	brne	.+20     	; 0x11e <UsartInit+0x40>
	UCSRC |= (1 << UPM1) | (0 << UPM0);  // äquivalent: UCSRC |= (1 << UPM1);
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	20 e4       	ldi	r18, 0x40	; 64
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	f9 01       	movw	r30, r18
 114:	20 81       	ld	r18, Z
 116:	20 62       	ori	r18, 0x20	; 32
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
 11c:	15 c0       	rjmp	.+42     	; 0x148 <UsartInit+0x6a>
	else
	if (ParBit == USART_ODD_PARITY)
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	51 f4       	brne	.+20     	; 0x138 <UsartInit+0x5a>
	UCSRC |= (1 << UPM1) | (1 << UPM0);
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	20 e4       	ldi	r18, 0x40	; 64
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	20 63       	ori	r18, 0x30	; 48
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
 136:	08 c0       	rjmp	.+16     	; 0x148 <UsartInit+0x6a>
	else
	UCSRC |= (0 << UPM1) | (0 << UPM0);  // brauchen wir eigentlich nicht...
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	20 e4       	ldi	r18, 0x40	; 64
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18

	// Anzahl der Stop-Bits festlegen: 1 oder 2
	if (StopBits == 1)
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	49 f4       	brne	.+18     	; 0x160 <UsartInit+0x82>
	UCSRC |= (0 << USBS);
 14e:	80 e4       	ldi	r24, 0x40	; 64
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	20 e4       	ldi	r18, 0x40	; 64
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
 15e:	0c c0       	rjmp	.+24     	; 0x178 <UsartInit+0x9a>
	else
	if (StopBits == 2)
 160:	8b 81       	ldd	r24, Y+3	; 0x03
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	49 f4       	brne	.+18     	; 0x178 <UsartInit+0x9a>
	UCSRC |= (1 << USBS);
 166:	80 e4       	ldi	r24, 0x40	; 64
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	20 e4       	ldi	r18, 0x40	; 64
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	28 60       	ori	r18, 0x08	; 8
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
	// Anzahl der Zeichenbits: 5..9
	// Üblich sind 8 Bits / Zeichen.
	// Bei 9 Zeichenbits muss man die besondere Behandlung des 9.Bits beim
	// Lesen und Schreiben beachten. Diese ist in unseren Lese- und Schreibroutinen
	// nicht berücksichtigt.
	switch (CharBits)
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	88 2f       	mov	r24, r24
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	87 30       	cpi	r24, 0x07	; 7
 180:	91 05       	cpc	r25, r1
 182:	c9 f0       	breq	.+50     	; 0x1b6 <UsartInit+0xd8>
 184:	88 30       	cpi	r24, 0x08	; 8
 186:	91 05       	cpc	r25, r1
 188:	34 f4       	brge	.+12     	; 0x196 <UsartInit+0xb8>
 18a:	85 30       	cpi	r24, 0x05	; 5
 18c:	91 05       	cpc	r25, r1
 18e:	d1 f1       	breq	.+116    	; 0x204 <UsartInit+0x126>
 190:	06 97       	sbiw	r24, 0x06	; 6
 192:	39 f0       	breq	.+14     	; 0x1a2 <UsartInit+0xc4>
 194:	38 c0       	rjmp	.+112    	; 0x206 <UsartInit+0x128>
 196:	88 30       	cpi	r24, 0x08	; 8
 198:	91 05       	cpc	r25, r1
 19a:	b9 f0       	breq	.+46     	; 0x1ca <UsartInit+0xec>
 19c:	09 97       	sbiw	r24, 0x09	; 9
 19e:	f9 f0       	breq	.+62     	; 0x1de <UsartInit+0x100>
 1a0:	32 c0       	rjmp	.+100    	; 0x206 <UsartInit+0x128>
	{
		case 5: // 5 Zeichenbits
		break;

		case 6: // 6 Zeichenbits
		UCSRC |= (1 << UCSZ0);
 1a2:	80 e4       	ldi	r24, 0x40	; 64
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	20 e4       	ldi	r18, 0x40	; 64
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	22 60       	ori	r18, 0x02	; 2
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
		break;
 1b4:	28 c0       	rjmp	.+80     	; 0x206 <UsartInit+0x128>

		case 7: // 7 Zeichenbits
		UCSRC |= (1 << UCSZ1);
 1b6:	80 e4       	ldi	r24, 0x40	; 64
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	20 e4       	ldi	r18, 0x40	; 64
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	f9 01       	movw	r30, r18
 1c0:	20 81       	ld	r18, Z
 1c2:	24 60       	ori	r18, 0x04	; 4
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
		break;
 1c8:	1e c0       	rjmp	.+60     	; 0x206 <UsartInit+0x128>

		case 8: // 8 Zeichenbits
		UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
 1ca:	80 e4       	ldi	r24, 0x40	; 64
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	20 e4       	ldi	r18, 0x40	; 64
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	f9 01       	movw	r30, r18
 1d4:	20 81       	ld	r18, Z
 1d6:	26 60       	ori	r18, 0x06	; 6
 1d8:	fc 01       	movw	r30, r24
 1da:	20 83       	st	Z, r18
		break;
 1dc:	14 c0       	rjmp	.+40     	; 0x206 <UsartInit+0x128>

		case 9: // 9 Zeichenbits
		UCSRB |= (1 << UCSZ2);
 1de:	8a e2       	ldi	r24, 0x2A	; 42
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	2a e2       	ldi	r18, 0x2A	; 42
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	f9 01       	movw	r30, r18
 1e8:	20 81       	ld	r18, Z
 1ea:	24 60       	ori	r18, 0x04	; 4
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
		UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
 1f0:	80 e4       	ldi	r24, 0x40	; 64
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	20 e4       	ldi	r18, 0x40	; 64
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	f9 01       	movw	r30, r18
 1fa:	20 81       	ld	r18, Z
 1fc:	26 60       	ori	r18, 0x06	; 6
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
		break;
 202:	01 c0       	rjmp	.+2      	; 0x206 <UsartInit+0x128>
	// Lesen und Schreiben beachten. Diese ist in unseren Lese- und Schreibroutinen
	// nicht berücksichtigt.
	switch (CharBits)
	{
		case 5: // 5 Zeichenbits
		break;
 204:	00 00       	nop
	// Bei der Wahl der Bitrate muss der relative Bitratenfehler
	// aufgrund der Taktfrequenz des uC beachtet werden.
	// Dieser wirkt sich bei höheren Bitraten stärker aus, daher
	// darf bei großem Bitratenfehler die Bitrate nicht zu groß
	// gewählt werden.
	UBRRL = (F_CPU/(16*Baudrate)-1) % 256;
 206:	09 e2       	ldi	r16, 0x29	; 41
 208:	10 e0       	ldi	r17, 0x00	; 0
 20a:	8c 81       	ldd	r24, Y+4	; 0x04
 20c:	9d 81       	ldd	r25, Y+5	; 0x05
 20e:	ae 81       	ldd	r26, Y+6	; 0x06
 210:	bf 81       	ldd	r27, Y+7	; 0x07
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	aa 1f       	adc	r26, r26
 218:	bb 1f       	adc	r27, r27
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	aa 1f       	adc	r26, r26
 220:	bb 1f       	adc	r27, r27
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	aa 1f       	adc	r26, r26
 228:	bb 1f       	adc	r27, r27
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	aa 1f       	adc	r26, r26
 230:	bb 1f       	adc	r27, r27
 232:	9c 01       	movw	r18, r24
 234:	ad 01       	movw	r20, r26
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	94 e2       	ldi	r25, 0x24	; 36
 23a:	a4 ef       	ldi	r26, 0xF4	; 244
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	bc 01       	movw	r22, r24
 240:	cd 01       	movw	r24, r26
 242:	0e 94 a9 01 	call	0x352	; 0x352 <__udivmodsi4>
 246:	da 01       	movw	r26, r20
 248:	c9 01       	movw	r24, r18
 24a:	81 50       	subi	r24, 0x01	; 1
 24c:	f8 01       	movw	r30, r16
 24e:	80 83       	st	Z, r24
	UBRRH = (F_CPU/(16*Baudrate)-1) / 256;
 250:	00 e4       	ldi	r16, 0x40	; 64
 252:	10 e0       	ldi	r17, 0x00	; 0
 254:	8c 81       	ldd	r24, Y+4	; 0x04
 256:	9d 81       	ldd	r25, Y+5	; 0x05
 258:	ae 81       	ldd	r26, Y+6	; 0x06
 25a:	bf 81       	ldd	r27, Y+7	; 0x07
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	aa 1f       	adc	r26, r26
 262:	bb 1f       	adc	r27, r27
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	aa 1f       	adc	r26, r26
 26a:	bb 1f       	adc	r27, r27
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	aa 1f       	adc	r26, r26
 272:	bb 1f       	adc	r27, r27
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	aa 1f       	adc	r26, r26
 27a:	bb 1f       	adc	r27, r27
 27c:	9c 01       	movw	r18, r24
 27e:	ad 01       	movw	r20, r26
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	94 e2       	ldi	r25, 0x24	; 36
 284:	a4 ef       	ldi	r26, 0xF4	; 244
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	bc 01       	movw	r22, r24
 28a:	cd 01       	movw	r24, r26
 28c:	0e 94 a9 01 	call	0x352	; 0x352 <__udivmodsi4>
 290:	da 01       	movw	r26, r20
 292:	c9 01       	movw	r24, r18
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	a1 09       	sbc	r26, r1
 298:	b1 09       	sbc	r27, r1
 29a:	89 2f       	mov	r24, r25
 29c:	9a 2f       	mov	r25, r26
 29e:	ab 2f       	mov	r26, r27
 2a0:	bb 27       	eor	r27, r27
 2a2:	f8 01       	movw	r30, r16
 2a4:	80 83       	st	Z, r24

	// Freigabe der Sende-/Empfangs-Kanäle und uC-Pins
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 2a6:	8a e2       	ldi	r24, 0x2A	; 42
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	2a e2       	ldi	r18, 0x2A	; 42
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	f9 01       	movw	r30, r18
 2b0:	20 81       	ld	r18, Z
 2b2:	28 61       	ori	r18, 0x18	; 24
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18
}
 2b8:	00 00       	nop
 2ba:	27 96       	adiw	r28, 0x07	; 7
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	08 95       	ret

000002d0 <UsartPutc>:

/*
*  1 Zeichen auf USART-Kanal ausgeben
*/
void UsartPutc(uint8_t Data)
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	1f 92       	push	r1
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)));
 2dc:	00 00       	nop
 2de:	8b e2       	ldi	r24, 0x2B	; 43
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	fc 01       	movw	r30, r24
 2e4:	80 81       	ld	r24, Z
 2e6:	88 2f       	mov	r24, r24
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	80 72       	andi	r24, 0x20	; 32
 2ec:	99 27       	eor	r25, r25
 2ee:	89 2b       	or	r24, r25
 2f0:	b1 f3       	breq	.-20     	; 0x2de <UsartPutc+0xe>
		UDR = Data;
 2f2:	8c e2       	ldi	r24, 0x2C	; 44
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	29 81       	ldd	r18, Y+1	; 0x01
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
}
 2fc:	00 00       	nop
 2fe:	0f 90       	pop	r0
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <UsartPuts>:

/*
*  String auf USART-Kanal ausgeben
*/
void UsartPuts(char* pString)
{
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	00 d0       	rcall	.+0      	; 0x30c <UsartPuts+0x6>
 30c:	00 d0       	rcall	.+0      	; 0x30e <UsartPuts+0x8>
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	9c 83       	std	Y+4, r25	; 0x04
 314:	8b 83       	std	Y+3, r24	; 0x03
	char* pData = pString;
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	9c 81       	ldd	r25, Y+4	; 0x04
 31a:	9a 83       	std	Y+2, r25	; 0x02
 31c:	89 83       	std	Y+1, r24	; 0x01
	
	while (*pData != 0)
 31e:	0b c0       	rjmp	.+22     	; 0x336 <UsartPuts+0x30>
	{
		UsartPutc(*pData);
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	9a 81       	ldd	r25, Y+2	; 0x02
 324:	fc 01       	movw	r30, r24
 326:	80 81       	ld	r24, Z
 328:	0e 94 68 01 	call	0x2d0	; 0x2d0 <UsartPutc>
		pData++;
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	9a 81       	ldd	r25, Y+2	; 0x02
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	9a 83       	std	Y+2, r25	; 0x02
 334:	89 83       	std	Y+1, r24	; 0x01
*/
void UsartPuts(char* pString)
{
	char* pData = pString;
	
	while (*pData != 0)
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	9a 81       	ldd	r25, Y+2	; 0x02
 33a:	fc 01       	movw	r30, r24
 33c:	80 81       	ld	r24, Z
 33e:	88 23       	and	r24, r24
 340:	79 f7       	brne	.-34     	; 0x320 <UsartPuts+0x1a>
	{
		UsartPutc(*pData);
		pData++;
	}
}
 342:	00 00       	nop
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <__udivmodsi4>:
 352:	a1 e2       	ldi	r26, 0x21	; 33
 354:	1a 2e       	mov	r1, r26
 356:	aa 1b       	sub	r26, r26
 358:	bb 1b       	sub	r27, r27
 35a:	fd 01       	movw	r30, r26
 35c:	0d c0       	rjmp	.+26     	; 0x378 <__udivmodsi4_ep>

0000035e <__udivmodsi4_loop>:
 35e:	aa 1f       	adc	r26, r26
 360:	bb 1f       	adc	r27, r27
 362:	ee 1f       	adc	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	a2 17       	cp	r26, r18
 368:	b3 07       	cpc	r27, r19
 36a:	e4 07       	cpc	r30, r20
 36c:	f5 07       	cpc	r31, r21
 36e:	20 f0       	brcs	.+8      	; 0x378 <__udivmodsi4_ep>
 370:	a2 1b       	sub	r26, r18
 372:	b3 0b       	sbc	r27, r19
 374:	e4 0b       	sbc	r30, r20
 376:	f5 0b       	sbc	r31, r21

00000378 <__udivmodsi4_ep>:
 378:	66 1f       	adc	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	88 1f       	adc	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	1a 94       	dec	r1
 382:	69 f7       	brne	.-38     	; 0x35e <__udivmodsi4_loop>
 384:	60 95       	com	r22
 386:	70 95       	com	r23
 388:	80 95       	com	r24
 38a:	90 95       	com	r25
 38c:	9b 01       	movw	r18, r22
 38e:	ac 01       	movw	r20, r24
 390:	bd 01       	movw	r22, r26
 392:	cf 01       	movw	r24, r30
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
